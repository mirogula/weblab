[main]
# Create and setup user filter.
user = sk.stuba.fei.weblab.web.FacesAjaxAwareUserFilter
user.loginUrl = /login.xhtml


ldapRealm = org.apache.shiro.realm.ldap.JndiLdapRealm
ldapRealm.userDnTemplate = uid={0},ou=People,dc=stuba,dc=sk
ldapRealm.contextFactory.url = ldap://ldap.stuba.sk:636
ldapRealm.contextFactory.authenticationMechanism = DIGEST-MD5
#ldapRealm.contextFactory.environment[some.obscure.jndi.key] = some value


# Create JDBC realm.
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm

# DataSource config
ds = org.apache.shiro.jndi.JndiObjectFactory 
ds.requiredType = javax.sql.DataSource
#ds.resourceName = java:comp/env/weblabDataSource
ds.resourceName = java:app/weblabDataSource
jdbcRealm.dataSource = $ds

# Configure JDBC realm SQL queries.
jdbcRealm.authenticationQuery = SELECT password FROM User WHERE username = ?
jdbcRealm.userRolesQuery = select Role.roleName from Role inner join UserRoles on Role.id=UserRoles.roleId inner join User on UserRoles.userId=User.id where User.username= ?

# define matcher matching hashes instead of passwords
sha256Matcher = org.apache.shiro.authc.credential.HashedCredentialsMatcher
sha256Matcher.hashAlgorithmName=SHA-256
jdbcRealm.credentialsMatcher = $sha256Matcher

#securityManager.realms = $ldapRealm, $jdbcRealm
securityManager.realms = $jdbcRealm

[urls]
/login.xhtml = user
/user/** = user, roles[user]
/admin/** = user, roles[admin,user]
/superadmin/** = user, roles[superadmin,admin,user]